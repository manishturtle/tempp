from django.db import migrations
import logging

logger = logging.getLogger(__name__)

CUSTOMER_GROUPS = [
    {
        'group_name': 'Retail',
        'group_type': 'INDIVIDUAL',
        'description': 'Standard retail customers'
    },
    {
        'group_name': 'Corporate',
        'group_type': 'BUSINESS',
        'description': 'Bulk buyers and resellers'
    },
]

SELLING_CHANNELS = [
    'Offline', 'POS', 'Web', 'Mobile'
]

def seed_customer_groups_and_channels(apps, schema_editor):
    CustomerGroup = apps.get_model('customers', 'CustomerGroup')
    SellingChannel = apps.get_model('pricing', 'SellingChannel')
    CustomerGroupSellingChannel = apps.get_model('customers', 'CustomerGroupSellingChannel')
    
    # 1. Seed Customer Groups
    created_groups = []
    for group in CUSTOMER_GROUPS:
        try:
            if not CustomerGroup.objects.filter(group_name=group['group_name']).exists():
                new_group = CustomerGroup.objects.create(
                    group_name=group['group_name'],
                    group_type=group['group_type'],
                    description=group['description'],
                    is_active=True,
                    # Add tenant fields
                    client_id=1,
                    company_id=1,
                    created_by=1,
                    updated_by=1
                )
                created_groups.append(new_group)
                print(f"Created customer group: {group['group_name']}")
            else:
                print(f"Customer group already exists: {group['group_name']}")
        except Exception as e:
            print(f"Error creating customer group {group['group_name']}: {e}")

    # 2. Ensure selling channels exist
    existing_channels = list(SellingChannel.objects.filter(name__in=SELLING_CHANNELS))
    print(f"Found {len(existing_channels)} selling channels: {', '.join([c.name for c in existing_channels])}")
    
    if not existing_channels:
        print("No selling channels found. Skipping relationship creation.")
        return
    
    # 3. Create relationships between groups and channels
    created_relationships = 0
    errors = 0
    
    # Get all customer groups (both newly created and existing)
    all_groups = CustomerGroup.objects.filter(group_name__in=[g['group_name'] for g in CUSTOMER_GROUPS])
    
    for group in all_groups:
        for channel in existing_channels:
            try:
                # Check if relationship already exists
                if not CustomerGroupSellingChannel.objects.filter(
                    customer_group=group, selling_channel=channel
                ).exists():
                    # Create relationship with tenant fields
                    # Note: segment_name will be auto-generated by the model's save() method
                    # Explicitly set segment_name to ensure it's created correctly
                    segment_name = f"{group.group_name}-{channel.name}"
                    relationship = CustomerGroupSellingChannel.objects.create(
                        customer_group=group,
                        selling_channel=channel,
                        status="ACTIVE",
                        segment_name=segment_name,  # Explicitly set segment_name
                        client_id=1,
                        company_id=1,
                        created_by=1,
                        updated_by=1
                    )
                    created_relationships += 1
                    print(f"Created relationship: {relationship.segment_name}")
            except Exception as e:
                errors += 1
                print(f"Error creating relationship between {group.group_name} and {channel.name}: {e}")
    
    print(f"Created {created_relationships} group-channel relationships with {errors} errors")
    if created_relationships == 0 and errors > 0:
        print("WARNING: Failed to create any relationships. Check the error messages above.")


class Migration(migrations.Migration):
    dependencies = [
        ('customers', '0009_customergroup_description_customergroup_display_name'),
        # Add dependency on the selling channels migration to ensure it runs first
        ('pricing', '0006_seed_selling_channels'),
    ]

    operations = [
        migrations.RunPython(seed_customer_groups_and_channels),
    ]
