# Generated by Django 4.2.10 on 2025-07-17 12:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("customers", "0004_account_country"),
    ]

    operations = [
        migrations.CreateModel(
            name="BankAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "bank_name",
                    models.CharField(
                        help_text="The name of the bank (e.g., State Bank of India)",
                        max_length=100,
                        verbose_name="bank name",
                    ),
                ),
                (
                    "account_holder_name",
                    models.CharField(
                        help_text="The legal name of the account holder",
                        max_length=100,
                        verbose_name="account holder name",
                    ),
                ),
                (
                    "account_number",
                    models.TextField(
                        help_text="The bank account number. Must be encrypted before storing.",
                        verbose_name="account number",
                    ),
                ),
                (
                    "ifsc_code",
                    models.TextField(
                        help_text="The bank's IFSC code. Must be encrypted before storing.",
                        verbose_name="IFSC code",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this bank account is active and can be used for transactions.",
                        verbose_name="is active",
                    ),
                ),
                (
                    "client_id",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Client identifier for multi-tenant applications",
                        null=True,
                        verbose_name="Client ID",
                    ),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Company identifier for organization structure",
                        null=True,
                        verbose_name="Company ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "created_by",
                    models.IntegerField(
                        blank=True,
                        help_text="ID of the user who created this record",
                        null=True,
                        verbose_name="created by",
                    ),
                ),
                (
                    "updated_by",
                    models.IntegerField(
                        blank=True,
                        help_text="ID of the user who last updated this record",
                        null=True,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "db_table": "bank_accounts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PaymentGateway",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gateway_name",
                    models.CharField(
                        help_text="The name of the payment gateway provider (e.g., Razorpay, Stripe, PayU)",
                        max_length=100,
                    ),
                ),
                (
                    "api_key",
                    models.TextField(
                        help_text="The API Key credential for authenticating with the gateway's server. Must be encrypted before storing."
                    ),
                ),
                (
                    "api_secret",
                    models.TextField(
                        help_text="The API Secret credential. Must be encrypted before storing."
                    ),
                ),
                (
                    "webhook_secret",
                    models.TextField(
                        blank=True,
                        help_text="The secret key used to verify incoming payment notifications (webhooks). Must be encrypted.",
                        null=True,
                    ),
                ),
                (
                    "merchant_id",
                    models.CharField(
                        blank=True,
                        help_text="Your unique merchant identifier provided by the payment gateway.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "success_webhook_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL in your system that the gateway should call when a payment is successful.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "failure_webhook_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL in your system that the gateway should call when a payment fails.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "supported_currencies",
                    models.CharField(
                        default="INR",
                        help_text="Comma-separated currency codes this gateway accepts (e.g., 'INR,USD,EUR').",
                        max_length=255,
                    ),
                ),
                (
                    "mdr_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="The Merchant Discount Rate percentage fee charged by the gateway per transaction (e.g., 1.75).",
                        max_digits=5,
                    ),
                ),
                (
                    "mdr_fixed_fee",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="A flat fee charged by the gateway per transaction, stored in the smallest currency unit (e.g., 300 for â‚¹3.00).",
                    ),
                ),
                (
                    "refund_api_endpoint",
                    models.URLField(
                        blank=True,
                        help_text="The specific API endpoint for processing refunds programmatically.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "supports_partial_refunds",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the gateway supports refunding only part of a transaction.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this payment gateway configuration is active and can be used for transactions.",
                    ),
                ),
                (
                    "client_id",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Client identifier for multi-tenant applications",
                        null=True,
                        verbose_name="Client ID",
                    ),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Company identifier for organization structure",
                        null=True,
                        verbose_name="Company ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "created_by",
                    models.IntegerField(
                        blank=True,
                        help_text="ID of the user who created this record",
                        null=True,
                        verbose_name="created by",
                    ),
                ),
                (
                    "updated_by",
                    models.IntegerField(
                        blank=True,
                        help_text="ID of the user who last updated this record",
                        null=True,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "db_table": "payment_gateways",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CashOfflineDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "collection_mechanism",
                    models.CharField(
                        choices=[
                            ("logistics_partner", "Logistics Partner (e.g., COD)"),
                            ("in_store_pos", "In-Store POS"),
                            ("direct_bank_deposit", "Direct Bank Deposit"),
                            ("cheque_dd", "Cheque/Demand Draft"),
                            ("manual_capture", "Manually Capture Payment"),
                        ],
                        help_text="Defines the specific offline method used (e.g., LOGISTICS_PARTNER for COD)",
                        max_length=50,
                        verbose_name="Collection Mechanism",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cash/Offline Payment Details",
                "verbose_name_plural": "Cash/Offline Payment Details",
                "db_table": "payment_method_cash_offline_details",
            },
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Customer-facing name for the payment option",
                        max_length=100,
                        verbose_name="Payment Method Name",
                    ),
                ),
                (
                    "payment_type",
                    models.CharField(
                        choices=[
                            ("online_gateway", "Online Gateway"),
                            ("bank_transfer", "Bank Transfer"),
                            ("cash_offline", "Cash/Offline"),
                        ],
                        help_text="Main category of the payment method",
                        max_length=20,
                        verbose_name="Payment Type",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Enable/disable this payment method system-wide",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "is_visible_on_store",
                    models.BooleanField(
                        default=True,
                        help_text="Show this payment method to customers during checkout",
                        verbose_name="Visible on Store",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes or customer-facing explanation",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Method",
                "verbose_name_plural": "Payment Methods",
                "db_table": "payment_method",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PaymentMethodCustomerGroupSellingChannel",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this payment method is active for this customer group and selling channel",
                    ),
                ),
                (
                    "customer_group_selling_channel",
                    models.ForeignKey(
                        help_text="Reference to the CustomerGroupSellingChannel relationship",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_method_relationships",
                        to="customers.customergroupsellingchannel",
                    ),
                ),
                (
                    "payment_method_id",
                    models.ForeignKey(
                        help_text="Reference to the payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_group_selling_channel_relationships",
                        to="payment_method.paymentmethod",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Method Channel Availability",
                "verbose_name_plural": "Payment Method Channel Availabilities",
                "db_table": "payment_method_customer_group_channels",
                "ordering": ["payment_method_id__name"],
            },
        ),
        migrations.AddField(
            model_name="paymentmethod",
            name="customer_group_selling_channels",
            field=models.ManyToManyField(
                blank=True,
                help_text="Customer group and selling channel combinations that have access to this payment method",
                related_name="payment_methods",
                through="payment_method.PaymentMethodCustomerGroupSellingChannel",
                to="customers.customergroupsellingchannel",
            ),
        ),
        migrations.CreateModel(
            name="PaymentGatewayOnlineDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "gateway_id",
                    models.ForeignKey(
                        help_text="Reference to the payment gateway",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_method_links",
                        to="payment_method.paymentgateway",
                    ),
                ),
                (
                    "payment_method_id",
                    models.ForeignKey(
                        help_text="Reference to the payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_gateway_methods",
                        to="payment_method.paymentmethod",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Gateway Online Detail",
                "verbose_name_plural": "Payment Gateway Online Details",
                "db_table": "payment_method_pg_online_details",
            },
        ),
        migrations.CreateModel(
            name="CashPOSDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "physical_location_id",
                    models.CharField(
                        help_text="Identifier for the physical store or warehouse where the POS terminal is located",
                        max_length=100,
                        verbose_name="Physical Location ID",
                    ),
                ),
                (
                    "pos_device_provider",
                    models.CharField(
                        help_text="Name of the POS machine provider (e.g., Pine Labs, Ingenico)",
                        max_length=100,
                        verbose_name="POS Device Provider",
                    ),
                ),
                (
                    "terminal_id",
                    models.CharField(
                        help_text="Unique ID of the specific POS terminal",
                        max_length=100,
                        verbose_name="Terminal ID",
                    ),
                ),
                (
                    "merchant_id",
                    models.CharField(
                        help_text="Merchant ID associated with the POS acquiring bank",
                        max_length=100,
                        verbose_name="Merchant ID",
                    ),
                ),
                (
                    "api_key",
                    models.TextField(
                        help_text="API Key for POS system integration (must be encrypted before saving)",
                        verbose_name="API Key",
                    ),
                ),
                (
                    "supported_card_networks",
                    models.CharField(
                        help_text="Comma-separated list of accepted card networks (e.g., Visa,Mastercard,RuPay)",
                        max_length=255,
                        verbose_name="Supported Card Networks",
                    ),
                ),
                (
                    "payment_method_id",
                    models.OneToOneField(
                        help_text="Reference to the cash offline payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pos_details",
                        to="payment_method.cashofflinedetails",
                    ),
                ),
            ],
            options={
                "verbose_name": "In-Store POS Details",
                "verbose_name_plural": "In-Store POS Details",
                "db_table": "payment_method_cash_pos_details",
            },
        ),
        migrations.AddField(
            model_name="cashofflinedetails",
            name="payment_method_id",
            field=models.OneToOneField(
                help_text="Reference to the payment method",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cash_offline_details",
                to="payment_method.paymentmethod",
            ),
        ),
        migrations.CreateModel(
            name="CashLogisticsPartnerDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "logistics_partner_name",
                    models.CharField(
                        help_text="Name of the logistics company (e.g., Delhivery, Blue Dart)",
                        max_length=100,
                        verbose_name="Logistics Partner Name",
                    ),
                ),
                (
                    "api_key",
                    models.TextField(
                        help_text="API Key for partner integration (must be encrypted before saving)",
                        verbose_name="API Key",
                    ),
                ),
                (
                    "merchant_id",
                    models.CharField(
                        help_text="Your unique merchant identifier with the logistics partner",
                        max_length=100,
                        verbose_name="Merchant ID",
                    ),
                ),
                (
                    "cod_collection_limit",
                    models.PositiveIntegerField(
                        help_text="Maximum cash amount the partner will collect per order (in paisa)",
                        verbose_name="COD Collection Limit",
                    ),
                ),
                (
                    "partner_settlement_cycle_days",
                    models.PositiveSmallIntegerField(
                        help_text="Number of days for the partner to settle collected funds",
                        verbose_name="Settlement Cycle (days)",
                    ),
                ),
                (
                    "payment_method_id",
                    models.OneToOneField(
                        help_text="Reference to the cash offline payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logistics_details",
                        to="payment_method.cashofflinedetails",
                    ),
                ),
                (
                    "settlement_bank_account",
                    models.ForeignKey(
                        help_text="Bank account for COD settlement",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="logistics_settlement_accounts",
                        to="payment_method.bankaccount",
                        verbose_name="Settlement Bank Account",
                    ),
                ),
            ],
            options={
                "verbose_name": "COD Logistics Partner Details",
                "verbose_name_plural": "COD Logistics Partner Details",
                "db_table": "payment_method_cod_logistics_details",
            },
        ),
        migrations.CreateModel(
            name="CashDirectDepositDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "customer_instructions",
                    models.TextField(
                        help_text="Specific instructions for this deposit method",
                        verbose_name="Customer Instructions",
                    ),
                ),
                (
                    "required_proof_details",
                    models.TextField(
                        help_text="Description of the proof of payment the customer must provide",
                        verbose_name="Required Proof Details",
                    ),
                ),
                (
                    "beneficiary_bank_account",
                    models.ForeignKey(
                        help_text="Bank account where customers should deposit funds",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="direct_deposit_accounts",
                        to="payment_method.bankaccount",
                        verbose_name="Beneficiary Bank Account",
                    ),
                ),
                (
                    "payment_method_id",
                    models.OneToOneField(
                        help_text="Reference to the cash offline payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="direct_deposit_details",
                        to="payment_method.cashofflinedetails",
                    ),
                ),
            ],
            options={
                "verbose_name": "Direct Bank Deposit Details",
                "verbose_name_plural": "Direct Bank Deposit Details",
                "db_table": "payment_method_cash_direct_deposit",
            },
        ),
        migrations.CreateModel(
            name="CashChequeDDDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "payee_name",
                    models.CharField(
                        help_text="Exact name to be written on the cheque/DD",
                        max_length=200,
                        verbose_name="Payee Name",
                    ),
                ),
                (
                    "collection_address",
                    models.TextField(
                        help_text="Physical address where customers should mail the cheque/DD",
                        verbose_name="Collection Address",
                    ),
                ),
                (
                    "clearing_time_days",
                    models.PositiveSmallIntegerField(
                        help_text="Estimated business days for cheque/DD to clear",
                        verbose_name="Clearing Time (days)",
                    ),
                ),
                (
                    "bounced_cheque_charges",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Penalty fee for bounced cheques (in paisa)",
                        verbose_name="Bounced Cheque Charges",
                    ),
                ),
                (
                    "deposit_bank_account",
                    models.ForeignKey(
                        help_text="Bank account where cheques/DDs will be deposited",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="cheque_dd_accounts",
                        to="payment_method.bankaccount",
                        verbose_name="Deposit Bank Account",
                    ),
                ),
                (
                    "payment_method_id",
                    models.OneToOneField(
                        help_text="Reference to the cash offline payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cheque_dd_details",
                        to="payment_method.cashofflinedetails",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cheque/DD Payment Details",
                "verbose_name_plural": "Cheque/DD Payment Details",
                "db_table": "payment_method_cash_cheque_dd",
            },
        ),
        migrations.CreateModel(
            name="BankTransferDetails",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "beneficiary_bank_name",
                    models.TextField(
                        help_text="Name of the bank where customers should send their payment (e.g., HDFC Bank)",
                        verbose_name="Beneficiary Bank Name",
                    ),
                ),
                (
                    "beneficiary_account_no",
                    models.TextField(
                        help_text="Bank account number. Must be encrypted before storing",
                        verbose_name="Beneficiary Account Number",
                    ),
                ),
                (
                    "beneficiary_ifsc_code",
                    models.TextField(
                        help_text="Bank's IFSC code. Must be encrypted before storing",
                        verbose_name="Beneficiary IFSC Code",
                    ),
                ),
                (
                    "beneficiary_account_holder_name",
                    models.TextField(
                        help_text="Legal name of the account holder as registered with the bank",
                        verbose_name="Account Holder Name",
                    ),
                ),
                (
                    "instructions_for_customer",
                    models.TextField(
                        blank=True,
                        help_text="Custom text guiding customers on how to make the transfer (e.g., 'Please mention your Order ID in the remarks')",
                        null=True,
                        verbose_name="Instructions for Customer",
                    ),
                ),
                (
                    "payment_method_id",
                    models.OneToOneField(
                        help_text="Reference to the payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bank_transfer_details",
                        to="payment_method.paymentmethod",
                    ),
                ),
            ],
            options={
                "verbose_name": "Bank Transfer Details",
                "verbose_name_plural": "Bank Transfer Details",
                "db_table": "payment_method_bank_transfer_details",
            },
        ),
        migrations.AddIndex(
            model_name="paymentmethodcustomergroupsellingchannel",
            index=models.Index(
                fields=["customer_group_selling_channel"], name="idx_pmcgsc_cgsc"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentmethodcustomergroupsellingchannel",
            index=models.Index(
                fields=["payment_method_id"], name="idx_pmcgsc_payment_id"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentmethodcustomergroupsellingchannel",
            index=models.Index(
                fields=["customer_group_selling_channel", "payment_method_id"],
                name="idx_pmcgsc_comp_query",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="paymentmethodcustomergroupsellingchannel",
            unique_together={("customer_group_selling_channel", "payment_method_id")},
        ),
        migrations.AddIndex(
            model_name="paymentmethod",
            index=models.Index(
                fields=["is_active", "is_visible_on_store"],
                name="idx_payment_method_visibility",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentmethod",
            index=models.Index(fields=["payment_type"], name="idx_payment_method_type"),
        ),
        migrations.AddIndex(
            model_name="paymentmethod",
            index=models.Index(fields=["name"], name="idx_payment_method_name"),
        ),
        migrations.AddIndex(
            model_name="paymentgatewayonlinedetails",
            index=models.Index(
                fields=["payment_method_id"], name="idx_pgod_payment_method"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentgatewayonlinedetails",
            index=models.Index(fields=["gateway_id"], name="idx_pgod_gateway"),
        ),
        migrations.AddIndex(
            model_name="paymentgatewayonlinedetails",
            index=models.Index(
                fields=["payment_method_id", "gateway_id"], name="idx_pgod_comp_fields"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="paymentgatewayonlinedetails",
            unique_together={("payment_method_id", "gateway_id")},
        ),
        migrations.AddIndex(
            model_name="cashposdetails",
            index=models.Index(
                fields=["payment_method_id"], name="idx_cpd_payment_method"
            ),
        ),
        migrations.AddIndex(
            model_name="cashposdetails",
            index=models.Index(
                fields=["physical_location_id"], name="idx_cpd_location"
            ),
        ),
        migrations.AddIndex(
            model_name="cashofflinedetails",
            index=models.Index(
                fields=["payment_method_id"], name="idx_cod_payment_method"
            ),
        ),
        migrations.AddIndex(
            model_name="cashofflinedetails",
            index=models.Index(
                fields=["collection_mechanism"], name="idx_cod_mechanism_type"
            ),
        ),
        migrations.AddIndex(
            model_name="cashlogisticspartnerdetails",
            index=models.Index(
                fields=["payment_method_id"], name="idx_clpd_payment_method"
            ),
        ),
        migrations.AddIndex(
            model_name="cashlogisticspartnerdetails",
            index=models.Index(
                fields=["logistics_partner_name"], name="idx_clpd_partner_name"
            ),
        ),
        migrations.AddIndex(
            model_name="cashdirectdepositdetails",
            index=models.Index(
                fields=["payment_method_id"], name="idx_cddd_payment_method"
            ),
        ),
        migrations.AddIndex(
            model_name="cashdirectdepositdetails",
            index=models.Index(
                fields=["beneficiary_bank_account"], name="idx_cddd_bank_account"
            ),
        ),
        migrations.AddIndex(
            model_name="cashchequedddetails",
            index=models.Index(
                fields=["payment_method_id"], name="idx_ccdd_payment_method"
            ),
        ),
        migrations.AddIndex(
            model_name="cashchequedddetails",
            index=models.Index(
                fields=["deposit_bank_account"], name="idx_ccdd_bank_account"
            ),
        ),
        migrations.AddIndex(
            model_name="banktransferdetails",
            index=models.Index(
                fields=["payment_method_id"], name="idx_btd_payment_method_fk"
            ),
        ),
    ]
