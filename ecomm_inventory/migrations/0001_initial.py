# Generated by Django 4.2.10 on 2025-07-09 15:07

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("products", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AdjustmentReason",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Short name for the reason (e.g., 'Cycle Count Discrepancy')",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional longer description", null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Inventory Adjustment Reason",
                "verbose_name_plural": "Inventory Adjustment Reasons",
                "ordering": ["name"],
                "unique_together": {("client_id", "name")},
            },
        ),
        migrations.CreateModel(
            name="FulfillmentLocation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("WAREHOUSE", "Warehouse"),
                            ("STORE", "Store"),
                            ("FULFILLMENT_CENTER", "Fulfillment Center"),
                            ("DROPSHIP", "Dropship"),
                            ("SUPPLIER", "Supplier"),
                            ("OTHER", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "address_line_1",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "address_line_2",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "state_province",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("postal_code", models.CharField(blank=True, max_length=20, null=True)),
                ("country_code", models.CharField(blank=True, max_length=2, null=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Fulfillment Location",
                "verbose_name_plural": "Fulfillment Locations",
                "ordering": ["name"],
                "unique_together": {("client_id", "name")},
            },
        ),
        migrations.CreateModel(
            name="Inventory",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "stock_quantity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "reserved_quantity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "non_saleable_quantity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "on_order_quantity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "in_transit_quantity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "returned_quantity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "hold_quantity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "backorder_quantity",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "low_stock_threshold",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "reorder_point",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Stock level at which to trigger a reorder",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "reorder_quantity",
                    models.PositiveIntegerField(
                        default=20,
                        help_text="Quantity to order when stock reaches reorder point",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory_levels",
                        to="ecomm_inventory.fulfillmentlocation",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory_levels",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Inventories",
                "ordering": ["product__name", "location__name"],
                "unique_together": {("client_id", "product", "location")},
            },
        ),
        migrations.CreateModel(
            name="InventoryAdjustment",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "adjustment_type",
                    models.CharField(
                        choices=[
                            ("ADD", "Addition"),
                            ("SUB", "Subtraction"),
                            ("RES", "Reservation"),
                            ("REL_RES", "Release Reservation"),
                            ("NON_SALE", "Mark Non-Saleable"),
                            ("RECV_PO", "Receive Purchase Order"),
                            ("SHIP_ORD", "Ship Sales Order"),
                            ("RET_STOCK", "Return to Stock"),
                            ("RET_NON_SALE", "Return to Non-Saleable"),
                            ("HOLD", "Place on Hold"),
                            ("REL_HOLD", "Release from Hold"),
                            ("CYCLE", "Cycle Count Adjustment"),
                            ("INIT", "Initial Stock Load"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "quantity_change",
                    models.IntegerField(
                        help_text="The change in quantity (positive for additions, negative for subtractions)"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Optional additional details for the adjustment",
                        null=True,
                    ),
                ),
                (
                    "new_stock_quantity",
                    models.IntegerField(
                        help_text="The stock_quantity AFTER this adjustment"
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "custom_fields",
                    models.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    "inventory",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="adjustments",
                        to="ecomm_inventory.inventory",
                    ),
                ),
                (
                    "reason",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="adjustments",
                        to="ecomm_inventory.adjustmentreason",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory Adjustment",
                "verbose_name_plural": "Inventory Adjustments",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="SerializedInventory",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "serial_number",
                    models.CharField(
                        db_index=True,
                        help_text="Unique serial number for this product unit",
                        max_length=255,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("RESERVED", "Reserved (Order Pending)"),
                            ("SOLD", "Sold (Shipped)"),
                            ("IN_TRANSIT", "In Transit (Transfer)"),
                            ("RETURNED", "Returned (Pending Inspection)"),
                            ("DAMAGED", "Damaged / Non-Saleable"),
                        ],
                        db_index=True,
                        default="AVAILABLE",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes about this serial number (e.g., damage details)",
                        null=True,
                    ),
                ),
                (
                    "inventory_record",
                    models.ForeignKey(
                        blank=True,
                        help_text="Link to the main Inventory record for this product/location",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="serial_numbers",
                        to="ecomm_inventory.inventory",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="serial_numbers",
                        to="ecomm_inventory.fulfillmentlocation",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        limit_choices_to={"is_serialized": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="serial_numbers",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Serialized Inventory Item",
                "verbose_name_plural": "Serialized Inventory Items",
                "ordering": ["product__name", "serial_number"],
                "indexes": [
                    models.Index(
                        fields=["product", "serial_number"],
                        name="ecomm_inven_product_cdbbee_idx",
                    ),
                    models.Index(
                        fields=["status", "location"],
                        name="ecomm_inven_status_429d5f_idx",
                    ),
                ],
                "unique_together": {("client_id", "product", "serial_number")},
            },
        ),
        migrations.CreateModel(
            name="Lot",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "lot_number",
                    models.CharField(
                        db_index=True,
                        help_text="Identifier for the batch/lot",
                        max_length=100,
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Quantity of this product from this lot at this location",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("RESERVED", "Reserved (Order Pending)"),
                            ("EXPIRED", "Expired"),
                            ("QUARANTINE", "In Quarantine"),
                            ("DAMAGED", "Damaged / Non-Saleable"),
                        ],
                        db_index=True,
                        default="AVAILABLE",
                        max_length=20,
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="Expiry date for this lot, if applicable",
                        null=True,
                    ),
                ),
                (
                    "manufacturing_date",
                    models.DateField(
                        blank=True,
                        help_text="Manufacturing date for this lot",
                        null=True,
                    ),
                ),
                (
                    "cost_price_per_unit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Cost price per unit for this lot",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Optional notes about this lot", null=True
                    ),
                ),
                (
                    "inventory_record",
                    models.ForeignKey(
                        blank=True,
                        help_text="Link to the main Inventory record for this product/location",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lots",
                        to="ecomm_inventory.inventory",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lots",
                        to="ecomm_inventory.fulfillmentlocation",
                    ),
                ),
                (
                    "parent_lot",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent lot if this was split from another lot",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="child_lots",
                        to="ecomm_inventory.lot",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        limit_choices_to={"is_lotted": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lots",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory Lot/Batch",
                "verbose_name_plural": "Inventory Lots/Batches",
                "ordering": ["product", "location", "created_at", "expiry_date"],
                "indexes": [
                    models.Index(
                        fields=["product", "lot_number"],
                        name="ecomm_inven_product_feb6ad_idx",
                    ),
                    models.Index(
                        fields=["status", "location"],
                        name="ecomm_inven_status_cca094_idx",
                    ),
                    models.Index(
                        fields=["expiry_date"], name="ecomm_inven_expiry__ac62f7_idx"
                    ),
                ],
                "unique_together": {
                    ("client_id", "product", "location", "lot_number", "status")
                },
            },
        ),
    ]
