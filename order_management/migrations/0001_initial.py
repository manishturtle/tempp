# Generated by Django 4.2.20 on 2025-06-07 10:11

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import uuid


def create_default_tenant_configurations(apps, schema_editor):
    """
    Create default tenant configuration for the current schema.
    """
    TenantConfiguration = apps.get_model('order_management', 'TenantConfiguration')
    
    # Default configuration values - using empty dictionaries as requested
    default_config = {
        'payment_settings': {},
        'notification_settings': {},
        'ui_template_settings': {},
        'feature_toggles': {
            'WALLET': False,
            'LOYALTY': False,
            'WISHLIST': False,
            'REVIEWS': False
        },
        'wallet_config': {},
        'returns_config': {},
        'loyalty_config': {},
        'pending_payment_timeout_minutes': None,
        'is_onboarding_completed': False
    }
    
    try:
        # Get the current schema name using SQL query
        with schema_editor.connection.cursor() as cursor:
            cursor.execute("SELECT current_schema()")
            current_schema = cursor.fetchone()[0]
        
        print(f"Running TenantConfiguration migration in schema: {current_schema}")
        
        # Only proceed if we're not in the public schema
        if current_schema and current_schema != 'public':
            # Check if configuration already exists
            if not TenantConfiguration.objects.using(schema_editor.connection.alias).filter(
                tenant_ref=current_schema
            ).exists():
                # Create the configuration using the current schema name
                tenant_config = TenantConfiguration.objects.using(schema_editor.connection.alias).create(
                    tenant_ref=current_schema,
                    **default_config
                )
                print(f"Created default TenantConfiguration for schema: {current_schema}")
            else:
                print(f"TenantConfiguration already exists for schema: {current_schema}")
        else:
            print(f"Skipping TenantConfiguration creation for public schema")
    except Exception as e:
        print(f"Error creating TenantConfiguration: {str(e)}")
        # Don't raise the exception - we don't want to break the migration


def reverse_default_tenant_configurations(apps, schema_editor):
    """
    Reverse function for the migration.
    This will not delete any configurations as they might have been modified.
    """
    pass


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Cart",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "user_id",
                    models.BigIntegerField(
                        blank=True,
                        db_index=True,
                        help_text="ID of the logged-in user who owns this cart",
                        null=True,
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Session key for guest carts",
                        max_length=40,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OPEN", "Open - Active cart"),
                            ("MERGED", "Merged - Logged in, merged with user cart"),
                            (
                                "ABANDONED",
                                "Abandoned - Session expired/user logged out",
                            ),
                        ],
                        db_index=True,
                        default="OPEN",
                        help_text="Current status of the cart",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "Cart",
                "verbose_name_plural": "Carts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CartItem",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "product_sku",
                    models.CharField(
                        db_index=True, help_text="Product SKU/code", max_length=100
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1, help_text="Quantity of the product in cart"
                    ),
                ),
            ],
            options={
                "verbose_name": "Cart Item",
                "verbose_name_plural": "Cart Items",
            },
        ),
        migrations.CreateModel(
            name="LoyaltyTransaction",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "account_id",
                    models.BigIntegerField(
                        db_index=True,
                        help_text="ID of the customer account that owns these loyalty points",
                    ),
                ),
                (
                    "contact_id",
                    models.BigIntegerField(
                        db_index=True,
                        help_text="Contact ID of the person whose points balance is affected",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("EARNED", "Points Earned"),
                            ("REDEEMED", "Points Redeemed"),
                            ("EXPIRED", "Points Expired"),
                            ("ADJUSTMENT", "Manual Adjustment"),
                        ],
                        db_index=True,
                        help_text="Type of loyalty transaction",
                        max_length=20,
                    ),
                ),
                (
                    "points_change",
                    models.IntegerField(
                        help_text="Points change (positive for earned/credit, negative for redeemed/debit/expired)"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="Date when points expire, if applicable",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes or details about the transaction",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Loyalty Transaction",
                "verbose_name_plural": "Loyalty Transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "order_id",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="Unique order identifier generated automatically in format ORD-{tenant}-{year}-{sequential_number}",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "account_id",
                    models.BigIntegerField(
                        blank=True,
                        null=True,
                        db_index=True,
                        help_text="Reference to customer account ID in the Customer Service. Indexed for efficient lookup. Null for guest orders.",
                    ),
                ),
                (
                    "contact_id",
                    models.BigIntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Reference to contact ID within customer account. May be null for guest checkouts or consumer orders.",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING_PAYMENT", "Pending Payment"),
                            ("PROCESSING", "Processing"),
                            ("AWAITING_FULFILLMENT", "Awaiting Fulfillment"),
                            ("PARTIALLY_SHIPPED", "Partially Shipped"),
                            ("SHIPPED", "Shipped"),
                            ("DELIVERED", "Delivered"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("ON_HOLD", "On Hold"),
                            ("BACKORDERED", "Backordered"),
                            ("REFUNDED", "Refunded"),
                            ("PARTIALLY_REFUNDED", "Partially Refunded"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        help_text="Current status of the order",
                        max_length=50,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        help_text="Three-letter currency code (e.g., USD, EUR)",
                        max_length=3,
                    ),
                ),
                (
                    "subtotal_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Sum of all order items before discounts, shipping, and taxes",
                        max_digits=12,
                    ),
                ),
                (
                    "discount_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total discount applied to the order",
                        max_digits=12,
                    ),
                ),
                (
                    "shipping_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Shipping cost",
                        max_digits=12,
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total tax applied to the order",
                        max_digits=12,
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Grand total including all items, discounts, shipping, and taxes",
                        max_digits=12,
                    ),
                ),
                (
                    "shipping_address",
                    models.JSONField(
                        blank=True,
                        db_index=True,
                        help_text="Shipping address as JSON object with fields: full_name, address_line1, address_line2, city, state, postal_code, country, phone_number",
                        null=True,
                    ),
                ),
                (
                    "billing_address",
                    models.JSONField(
                        blank=True,
                        db_index=True,
                        help_text="Billing address as a JSON object with fields: full_name, address_line1, address_line2, city, state, postal_code, country, phone_number",
                        null=True,
                    ),
                ),
                (
                    "shipping_method_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='Display name of the selected shipping method (e.g., "Express Shipping", "Standard Delivery")',
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "shipping_method_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Identifier for the shipping method provided by the fulfillment/shipping service",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("AUTHORIZED", "Authorized"),
                            ("CAPTURED", "Captured"),
                            ("PAID", "Paid"),
                            ("PARTIALLY_PAID", "Partially Paid"),
                            ("FAILED", "Failed"),
                            ("REFUNDED", "Refunded"),
                            ("PARTIALLY_REFUNDED", "Partially Refunded"),
                        ],
                        db_index=True,
                        default="PENDING",
                        help_text="Overall payment status of the order, derived from related Payment records",
                        max_length=50,
                    ),
                ),
                (
                    "tracking_number",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Shipping tracking number",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "carrier_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Name of the shipping carrier (e.g., UPS, FedEx, DHL)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "guest_access_token",
                    models.UUIDField(
                        blank=True,
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique token for guest users to access order status.",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "shipped_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When the order was shipped",
                        null=True,
                    ),
                ),
                (
                    "delivered_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="When the order was delivered",
                        null=True,
                    ),
                ),
                (
                    "recipient_details",
                    models.JSONField(
                        'Recipient Details',
                        default=dict,
                        blank=True,
                        help_text="Stores recipient information including name, contact, and preferences",
                    ),
                ),
                (
                    "delivery_preferences",
                    models.JSONField(
                        'Delivery Preferences',
                        default=dict,
                        blank=True,
                        help_text="Stores customer delivery preferences and special instructions",
                    ),
                ),
                (
                    "fulfillment_details",
                    models.JSONField(
                        'Fulfillment Details',
                        default=dict,
                        blank=True,
                        help_text="Stores fulfillment method and related information",
                    ),
                ),
                (
                    "pickup_details",
                    models.JSONField(
                        'Pickup Details',
                        default=dict,
                        blank=True,
                        help_text="Stores pickup location, date, time slot, and instructions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Order",
                "verbose_name_plural": "Orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "product_sku",
                    models.CharField(
                        db_index=True, help_text="Product SKU/code", max_length=100
                    ),
                ),
                (
                    "product_name",
                    models.CharField(
                        help_text="Product name at time of order", max_length=255
                    ),
                ),
                ("quantity", models.PositiveIntegerField(help_text="Quantity ordered")),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price per unit at time of order",
                        max_digits=12,
                    ),
                ),
                (
                    "total_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total price for this line item (unit_price × quantity)",
                        max_digits=12,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        help_text="The order this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="order_management.order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Order Item",
                "verbose_name_plural": "Order Items",
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "user_id",
                    models.BigIntegerField(
                        db_index=True, help_text="The user whose password needs reset"
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        db_index=True,
                        help_text="Secure random token",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(help_text="Timestamp when this token expires"),
                ),
            ],
            options={
                "verbose_name": "Password Reset Token",
                "verbose_name_plural": "Password Reset Tokens",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RMA",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "rma_number",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="Unique RMA identifier generated automatically",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "contact_id",
                    models.BigIntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Contact ID of the person who initiated the return",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING_APPROVAL", "Pending Approval"),
                            ("APPROVED", "Approved (Awaiting Return)"),
                            ("REJECTED", "Rejected"),
                            ("RECEIVED", "Return Received"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("CLOSED", "Closed"),
                        ],
                        db_index=True,
                        default="PENDING_APPROVAL",
                        help_text="Current status of the RMA",
                        max_length=50,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes or comments about the return",
                        null=True,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        help_text="The order this RMA is associated with",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="rmas",
                        to="order_management.order",
                    ),
                ),
            ],
            options={
                "verbose_name": "RMA Request",
                "verbose_name_plural": "RMA Requests",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TenantConfiguration",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "tenant_ref",
                    models.CharField(
                        db_index=True,
                        editable=False,
                        help_text="Unique identifier for the tenant (e.g., from URL path).",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "payment_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Payment gateway configurations and preferences",
                    ),
                ),
                (
                    "notification_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Notification provider configurations and preferences",
                    ),
                ),
                (
                    "ui_template_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="UI template selections and customizations",
                    ),
                ),
                (
                    "feature_toggles",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Feature flag settings to enable/disable functionality",
                    ),
                ),
                (
                    "wallet_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuration settings for the Wallet module",
                        null=True,
                    ),
                ),
                (
                    "returns_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Return policy configuration including return window, allowed order statuses, and non-returnable products",
                        null=True,
                    ),
                ),
                (
                    "loyalty_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuration settings for the Loyalty module",
                        null=True,
                    ),
                ),
                (
                    "pending_payment_timeout_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        default=2880,
                        help_text="Automatically cancel orders pending payment after this many MINUTES. Leave blank or 0 to disable.",
                        null=True,
                    ),
                ),
                (
                    "is_onboarding_completed",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether the tenant has completed their initial onboarding process",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tenant Configuration",
                "verbose_name_plural": "Tenant Configurations",
            },
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "account_id",
                    models.BigIntegerField(
                        db_index=True,
                        help_text="ID of the customer account this wallet belongs to",
                        unique=True,
                    ),
                ),
                (
                    "balance",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Current wallet balance",
                        max_digits=12,
                    ),
                ),
            ],
            options={
                "verbose_name": "Wallet",
                "verbose_name_plural": "Wallets",
            },
        ),
        migrations.CreateModel(
            name="WishlistItem",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "user_id",
                    models.BigIntegerField(
                        db_index=True,
                        help_text="Legacy User ID field - will be deprecated in favor of contact_id",
                    ),
                ),
                (
                    "contact_id",
                    models.BigIntegerField(
                        db_index=True,
                        help_text="Contact ID of the person who owns this wishlist item",
                        null=True,
                    ),
                ),
                (
                    "product_sku",
                    models.CharField(
                        db_index=True, help_text="Product SKU/code", max_length=100
                    ),
                ),
            ],
            options={
                "verbose_name": "Wishlist Item",
                "verbose_name_plural": "Wishlist Items",
                "unique_together": {("contact_id", "product_sku")},
            },
        ),
        migrations.CreateModel(
            name="WalletTransaction",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("RECHARGE", "Recharge"),
                            ("BONUS", "Bonus"),
                            ("ORDER_PAYMENT", "Order Payment"),
                            ("REFUND", "Refund"),
                            ("ADJUSTMENT", "Manual Adjustment"),
                        ],
                        db_index=True,
                        help_text="Type of wallet transaction",
                        max_length=20,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Transaction amount (positive for credit, negative for debit)",
                        max_digits=12,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes or details about the transaction",
                        null=True,
                    ),
                ),
                (
                    "related_order",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related order for payment or refund transactions",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="wallet_transactions",
                        to="order_management.order",
                    ),
                ),
                (
                    "related_rma",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related RMA for refund transactions",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="wallet_transactions",
                        to="order_management.rma",
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        help_text="The wallet this transaction belongs to",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transactions",
                        to="order_management.wallet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wallet Transaction",
                "verbose_name_plural": "Wallet Transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RMAItem",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "quantity_requested",
                    models.PositiveIntegerField(
                        help_text="Quantity requested to be returned"
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for the return",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "resolution",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PENDING", "Pending"),
                            ("REFUND", "Refund"),
                            ("REPLACEMENT", "Replacement"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="PENDING",
                        help_text="Resolution for this returned item",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "received_quantity",
                    models.PositiveIntegerField(
                        blank=True,
                        default=0,
                        help_text="Quantity actually received",
                        null=True,
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("UNKNOWN", "Unknown"),
                            ("AS_NEW", "As New"),
                            ("DAMAGED", "Damaged"),
                            ("OPENED", "Opened"),
                            ("DEFECTIVE", "Defective"),
                        ],
                        default="UNKNOWN",
                        help_text="Condition of the returned item",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "order_item",
                    models.ForeignKey(
                        help_text="The original order item being returned",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="rma_items",
                        to="order_management.orderitem",
                    ),
                ),
                (
                    "rma",
                    models.ForeignKey(
                        help_text="The RMA this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="order_management.rma",
                    ),
                ),
            ],
            options={
                "verbose_name": "RMA Item",
                "verbose_name_plural": "RMA Items",
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount of this payment/attempt in order currency. Negative for refunds.",
                        max_digits=12,
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        db_index=True,
                        help_text="Payment method used or attempted",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("AUTHORIZED", "Authorized"),
                            ("CAPTURED", "Captured"),
                            ("PAID", "Paid"),
                            ("PARTIALLY_PAID", "Partially Paid"),
                            ("FAILED", "Failed"),
                            ("REFUNDED", "Refunded"),
                            ("PARTIALLY_REFUNDED", "Partially Refunded"),
                        ],
                        db_index=True,
                        default="PENDING",
                        help_text="Current status of this specific payment transaction",
                        max_length=50,
                    ),
                ),
                (
                    "gateway_transaction_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Transaction ID from the payment gateway/microservice",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "gateway_response",
                    models.JSONField(
                        blank=True,
                        help_text="Complete response data from payment gateway/microservice callback",
                        null=True,
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Timestamp when the payment was processed by the gateway/service",
                        null=True,
                    ),
                ),
                (
                    "loyalty_transaction",
                    models.OneToOneField(
                        blank=True,
                        help_text="Associated loyalty transaction for loyalty point redemptions",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="payment_record",
                        to="order_management.loyaltytransaction",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        help_text="Order associated with this payment attempt/transaction",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="order_management.order",
                    ),
                ),
                (
                    "wallet_transaction",
                    models.OneToOneField(
                        blank=True,
                        help_text="Associated wallet transaction for wallet payments",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="payment_record",
                        to="order_management.wallettransaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Transaction",
                "verbose_name_plural": "Payment Transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["client_id", "status", "created_at"],
                name="om_order_client_status_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["client_id", "account_id", "created_at"],
                name="om_order_client_account_idx",
            ),
        ),
        migrations.AddField(
            model_name="loyaltytransaction",
            name="related_order",
            field=models.ForeignKey(
                blank=True,
                help_text="Related order for earned or redeemed points",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="loyalty_transactions",
                to="order_management.order",
            ),
        ),
        migrations.AddField(
            model_name="cartitem",
            name="cart",
            field=models.ForeignKey(
                help_text="The cart this item belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="items",
                to="order_management.cart",
            ),
        ),
        migrations.AddIndex(
            model_name="wallettransaction",
            index=models.Index(
                fields=["client_id", "wallet", "created_at"],
                name="om_wallet_tx_client_wallet_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="wallettransaction",
            index=models.Index(
                fields=["client_id", "transaction_type", "created_at"],
                name="om_wallet_tx_client_type_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="rma",
            index=models.Index(
                fields=["client_id", "status", "created_at"],
                name="om_rma_client_status_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="rma",
            index=models.Index(
                fields=["client_id", "order", "status"], name="om_rma_client_order_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["client_id", "order", "status"],
                name="om_payment_client_order_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["gateway_transaction_id"], name="om_payment_gateway_txn_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="loyaltytransaction",
            index=models.Index(
                fields=["client_id", "contact_id", "created_at"],
                name="om_loyalty_tx_contact_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="loyaltytransaction",
            index=models.Index(
                fields=["client_id", "account_id", "created_at"],
                name="om_loyalty_tx_account_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="loyaltytransaction",
            index=models.Index(
                fields=["client_id", "account_id", "transaction_type", "expiry_date"],
                name="om_loyalty_tx_acc_type_exp_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="cartitem",
            unique_together={("cart", "product_sku")},
        ),
        # Add default tenant configuration for each tenant schema
        migrations.RunPython(
            create_default_tenant_configurations,
            reverse_default_tenant_configurations
        ),
    ]
