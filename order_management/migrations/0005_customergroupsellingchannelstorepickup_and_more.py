# Generated by Django 4.2.10 on 2025-07-15 09:51

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("customers", "0004_account_country"),
        ("order_management", "0004_tenantconfiguration_checkout_config"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomerGroupSellingChannelStorePickup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this relationship is active",
                    ),
                ),
                (
                    "customer_group_selling_channel",
                    models.ForeignKey(
                        help_text="Reference to the CustomerGroupSellingChannel relationship",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="store_pickup_relationships",
                        to="customers.customergroupsellingchannel",
                    ),
                ),
                (
                    "store_pickup",
                    models.ForeignKey(
                        help_text="Reference to the StorePickup location",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_group_selling_channel_relationships",
                        to="order_management.storepickup",
                    ),
                ),
            ],
            options={
                "db_table": "order_management_store_pickup_exclusions",
                "ordering": ["customer_group_selling_channel", "store_pickup__name"],
            },
        ),
        migrations.CreateModel(
            name="CustomerGroupSellingChannelShippingMethod",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "client_id",
                    models.BigIntegerField(db_index=True, default=1, editable=False),
                ),
                (
                    "company_id",
                    models.BigIntegerField(
                        db_index=True,
                        default=1,
                        editable=False,
                        help_text="Company Identifier (within tenant). Default=1 for Phase 1.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.BigIntegerField(
                        blank=True, db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "updated_by",
                    models.BigIntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores basic custom field data as key-value pairs defined by admin settings.",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this relationship is active",
                    ),
                ),
                (
                    "customer_group_selling_channel",
                    models.ForeignKey(
                        help_text="Reference to the CustomerGroupSellingChannel relationship",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shipping_method_relationships",
                        to="customers.customergroupsellingchannel",
                    ),
                ),
                (
                    "shipping_method",
                    models.ForeignKey(
                        help_text="Reference to the ShippingMethod",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_group_selling_channel_relationships",
                        to="order_management.shippingmethod",
                    ),
                ),
            ],
            options={
                "db_table": "order_management_shipping_method_exclusions",
                "ordering": ["customer_group_selling_channel", "shipping_method__name"],
            },
        ),
        migrations.AddField(
            model_name="shippingmethod",
            name="customer_group_selling_channels",
            field=models.ManyToManyField(
                blank=True,
                help_text="Customer group and selling channel combinations that have access to this shipping method",
                related_name="shipping_methods",
                through="order_management.CustomerGroupSellingChannelShippingMethod",
                to="customers.customergroupsellingchannel",
            ),
        ),
        migrations.AddField(
            model_name="storepickup",
            name="customer_group_selling_channels",
            field=models.ManyToManyField(
                blank=True,
                help_text="Customer group and selling channel combinations that have access to this store pickup location",
                related_name="store_pickups",
                through="order_management.CustomerGroupSellingChannelStorePickup",
                to="customers.customergroupsellingchannel",
            ),
        ),
        migrations.AddIndex(
            model_name="customergroupsellingchannelstorepickup",
            index=models.Index(
                fields=["customer_group_selling_channel", "is_active"],
                name="idx_cgspsp_cgsc_act",
            ),
        ),
        migrations.AddIndex(
            model_name="customergroupsellingchannelstorepickup",
            index=models.Index(
                fields=["store_pickup", "is_active"], name="idx_cgspsp_sp_act"
            ),
        ),
        migrations.AddIndex(
            model_name="customergroupsellingchannelstorepickup",
            index=models.Index(
                fields=["customer_group_selling_channel", "store_pickup", "is_active"],
                name="idx_cgspsp_all",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="customergroupsellingchannelstorepickup",
            unique_together={("customer_group_selling_channel", "store_pickup")},
        ),
        migrations.AddIndex(
            model_name="customergroupsellingchannelshippingmethod",
            index=models.Index(
                fields=["customer_group_selling_channel", "is_active"],
                name="idx_cgscsm_cgsc_act",
            ),
        ),
        migrations.AddIndex(
            model_name="customergroupsellingchannelshippingmethod",
            index=models.Index(
                fields=["shipping_method", "is_active"], name="idx_cgscsm_sm_act"
            ),
        ),
        migrations.AddIndex(
            model_name="customergroupsellingchannelshippingmethod",
            index=models.Index(
                fields=[
                    "customer_group_selling_channel",
                    "shipping_method",
                    "is_active",
                ],
                name="idx_cgscsm_all",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="customergroupsellingchannelshippingmethod",
            unique_together={("customer_group_selling_channel", "shipping_method")},
        ),
    ]
