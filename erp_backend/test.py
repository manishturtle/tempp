"""
Django settings for itrapp project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-et3*=!m311!z%rza&gcj389@yhi#8u$l_)5wx6(m!g-gc-3qy!"

# Secret key for portal JWT tokens
PORTAL_JWT_SECRET = "portal-secret-key-for-jwt-tokens-should-be-kept-secure"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = ["beitr.shahmv.com", "localhost", "bedevitr.shahmv.com"]
# ALLOWED_HOSTS = ["localhost", "beitr.shahmv.com"]

CORS_ALLOWED_ORIGINS = ["https://devitr.shahmv.com", "https://itr.shahmv.com"]

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = False  # Be explicit about allowed origins


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "django_filters",
    "authentication",
    "customers",
    "documents",
    "credentials",
    "sop",
    "process",
    "servicecategory",
    "serviceagent",
    "servicetickets",  # Add the new app
    "externalcustomer",  # External customer portal app
    "invoices.apps.InvoicesConfig",
    "payments.apps.PaymentsConfig",
    "payment_links",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Add CORS middleware before CommonMiddleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "itrapp.urls"

# Email settings
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # For development
DEFAULT_FROM_EMAIL = "noreply@itrapp.com"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "itrapp.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "software4ca",
        "USER": "postgres",
        "PASSWORD": "abc123",
        # "PASSWORD": "Qu1ckAss1st@123",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Media files (Uploaded files)
# Documents are stored in software4ca_docs, not software4ca_sop
MEDIA_ROOT = "C:\\software4ca_docs"
MEDIA_URL = "/media/docs/"

# Django REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_AUTHENTICATION_CLASSES": [],  # No default authentication
    "DEFAULT_PERMISSION_CLASSES": [],  # No default permissions
}

# JWT settings
# REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "authentication.backends.CustomJWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

# JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

# Portal JWT settings - use a different secret for portal tokens
PORTAL_JWT_SECRET = "portal-secret-key-change-in-production-e8f2b9c1a3d5"

# User credentials for authentication
AUTH_USER_CREDENTIALS = {
    "USER_ID": "admin",
    "PASSWORD": "password123",
}

# Default expiry for generated payment links, in days.
PAYMENT_LINK_EXPIRY_DAYS = 7

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only, restrict in production
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery settings
CELERY_BROKER_URL = "redis://127.0.0.1:6379/0"
CELERY_RESULT_BACKEND = "redis://127.0.0.1:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_TIMEZONE = TIME_ZONE

# Google Cloud Storage settings
GCS_BUCKET_NAME = "software4ca"
GCS_PROJECT_ID = "turtle-software-qrosity"
GCS_SERVICE_ACCOUNT_PATH = os.path.join(BASE_DIR, "gcp-service-account.json")

# PHONEPE PAYMENT GATEWAY SETTINGS (for SDK V2)
# ------------------------------------------------------------------------------
PHONEPE_ENV = "UAT"  # "UAT" for Env.SANDBOX, "PROD" for Env.PRODUCTION

# UAT Credentials
PHONEPE_UAT_CLIENT_ID = "TEST-M22DMC2QP3JWU_25050"  # This is your UAT Merchant ID
PHONEPE_UAT_CLIENT_SECRET = (
    "ZGNhMDE5NzctYTc1NC00ZGMwLTkzY2QtMmM1M2Y3MzdkZmFk"  # This is your UAT Salt Key
)
PHONEPE_UAT_SALT_INDEX = 1  # This is your UAT Salt Index (SDK calls it client_version)

# Production Credentials (IMPORTANT: Use environment variables for these in production)
PHONEPE_PROD_CLIENT_ID = (
    "SU2505091924217199752710"  # Replace with your actual PROD Merchant ID
)
PHONEPE_PROD_CLIENT_SECRET = (
    "f99d3282-87e5-4320-bb8a-b1d7efe6e2fb"  # Replace with your actual PROD Salt Key
)
PHONEPE_PROD_SALT_INDEX = 1  # Or your production salt index

# Your backend's S2S callback URL (PhonePe will POST to this)
# Ensure this is publicly accessible for UAT (e.g., using ngrok) and for Production.
# The PhonePe checklist says this "should be passed in the request payload".
PHONEPE_CALLBACK_URL = (
    "http://localhost:8000/api/v1/payments/phonepe-callback/"  # Adjust as needed
)

# Your frontend redirect URL base (user is redirected here after payment attempt on PhonePe page/iframe)
# The merchantTransactionId will be appended to this base by your PhonePeService.
PHONEPE_REDIRECT_URL_BASE = (
    "http://localhost:3000/payment-status"  # Adjust with your Next.js frontend URL
)

# Optional: if SDK needs these for event publishing (default is false as per your snippet)
PHONEPE_SHOULD_PUBLISH_EVENTS = False

PHONEPE_PAY_API_ENDPOINT_V2 = "/checkout/v2/pay"
PHONEPE_STATUS_API_ENDPOINT_V2_TEMPLATE = (
    "/checkout/v2/order/{merchant_order_id}/status"
)

MERCHANT_USERNAME = "admin"
MERCHANT_PASSWORD = "India123"


# ---- CELERY LOGGING CONFIGURATION ----

LOGS_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)  # Create the logs directory if it doesn't exist

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "celery_formatter": {
            "format": "[%(asctime)s] [%(levelname)s] [%(name)s:%(lineno)d] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "phonepe_formatter": {
            "format": "[%(asctime)s] [%(levelname)s] [%(name)s] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "celery_formatter",  # Using celery_formatter for console too for consistency
        },
        "phonepe_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGS_DIR, "phonepe_callback.log"),
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 10,  # Keep 10 backup files
            "formatter": "phonepe_formatter",
            "encoding": "utf8",
        },
        "celery_logfile": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(
                LOGS_DIR, "celery.log"
            ),  # General Celery worker logs
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "celery_formatter",
        },
        "celery_task_logfile": {  # For Celery's own task messages AND your app's task messages
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(
                LOGS_DIR, "celery_tasks.log"
            ),  # Specific file for task-related logs
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 3,
            "formatter": "celery_formatter",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "celery": {  # Root logger for Celery itself (startup, connection, etc.)
            "handlers": ["celery_logfile", "console"],
            "level": "INFO",
            "propagate": True,  # Let Celery's own sub-loggers decide if they propagate
        },
        "celery.task": {  # Logger for Celery's internal task messages (e.g., "Task received", "Task succeeded")
            "handlers": ["celery_task_logfile", "console"],
            "level": "INFO",
            "propagate": False,  # Don't let these duplicate to the main 'celery' logger if handled here
        },
        "celery.worker": {
            "handlers": [
                "celery_logfile",
                "console",
            ],  # Worker specific logs to general celery log
            "level": "INFO",
            "propagate": False,
        },
        "celery.beat": {
            "handlers": ["celery_logfile", "console"],
            "level": "INFO",
            "propagate": False,
        },
        # ---- ADD THIS SECTION for your specific task logger ----
        "invoices.tasks": {  # This matches logger = logging.getLogger(__name__) in invoices.tasks
            "handlers": [
                "celery_task_logfile",
                "console",
            ],  # Send to the same file as celery.task messages
            "level": "INFO",  # Or 'DEBUG' if you want more verbose logs from this specific module
            "propagate": False,  # Important: Set to False if you handle it here to avoid duplicate logs
            # if a parent logger (like root or 'celery') also has the same handlers.
        },
        # ---- END ADDED SECTION ----
        # PhonePe Callback Logger
        "payments.views": {
            "handlers": ["phonepe_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "payments.phonepe_service": {
            "handlers": ["phonepe_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
    },
    # OPTIONAL: Configure the root logger as a catch-all for unconfigured loggers
    # 'root': {
    #     'handlers': ['celery_logfile', 'console'], # Example: send other unhandled logs here
    #     'level': 'INFO',
    # }
}

# ---- END CELERY LOGGING CONFIGURATION ----
