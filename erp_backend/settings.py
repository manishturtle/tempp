"""
Django settings for erp_backend project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from math import log
import os
from pathlib import Path
from google.oauth2 import service_account

# Webhook timestamp tolerance in seconds (e.g., 5 minutes)
WEBHOOK_TIMESTAMP_TOLERANCE_SECONDS = int(
    os.getenv("WEBHOOK_TIMESTAMP_TOLERANCE_SECONDS", 300)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-test-key-for-development-only")
# SECURITY WARNING: don't run with debug turned on in production!
# Defaults to False unless DEBUG environment variable is explicitly 'true' (case-insensitive)
DEBUG = os.getenv("DEBUG", "False").lower() == "true"
CORS_ALLOW_ALL_ORIGINS = True
ALLOWED_HOSTS = ["localhost", "127.0.0.1", "192.168.13.62"]
TENANT_URL = "http://localhost:8000/api"
# TENANT_URL = "https://cockpit.turtleit.in/api"
SM_URL = "http://localhost:8001/api"

# CORS settings
# Using CORS_ALLOW_ALL_ORIGINS = True to allow all origins including dynamic tenant paths
# For production, consider using CORS_ORIGIN_REGEX_WHITELIST for more precise control
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# This setting is not needed when CORS_ALLOW_ALL_ORIGINS is True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
# ]

# Frontend URL for links in emails
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")

# Password reset settings
PASSWORD_RESET_TIMEOUT_HOURS = 24  # Token valid for 24 hours
PORTAL_LOGIN_URL = f"{FRONTEND_URL}/login"
SUPPORT_EMAIL = os.getenv("SUPPORT_EMAIL", "support@example.com")
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Application definition

# Shared apps are available in all schemas
SHARED_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.messages",
    # Third party apps
    "rest_framework",
    "django_filters",
    # Local shared apps
    # 'core',
    "shared",
    # 'tenants',
    # 'ecomm_inventory',
    "erp_backend",
]

# Tenant apps are only available in tenant schemas
TENANT_APPS = [
    "django.contrib.auth",  # Move auth to tenant apps
    "django.contrib.sessions",
    "django.contrib.admin",
    # Local tenant apps
    "users",
    "products",
    "pricing",
    "attributes",
    "assets",
    "customers",
    "ecomm_auth",
    "activities",
    "order_management",
    "invoices",
    "core",
    "tenants",
    "ecomm_inventory",
    "onboarding",  # Add the new onboarding app
    "site_config",  # Site configuration for header and navigation
    "pages",  # Landing pages and modular content blocks
    "opportunities",
    "payment_method",  # Payment methods management
    "shipping_zones",
    "receipts",
]

INSTALLED_APPS = SHARED_APPS + TENANT_APPS


# All apps - used for standard Django setup until multi-tenancy is fully implemented
# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',

#     # Third party apps
#     'rest_framework',
#     'django_filters',
#     'corsheaders',
#     'storages',  # Add django-storages
#     'rest_framework_simplejwt',
#     'drf_spectacular',

#     # Local apps
# 'core',
# 'shared',
# 'users',
# 'tenants',
# 'inventory',
# 'products',
# 'pricing',
# 'attributes',
# 'assets',
# 'customers',
# 'ecomm_auth',
# 'activities',
# 'ecomm_inventory',
# 'order_management',
# 'invoices.apps.InvoicesConfig',

# ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # 'order_management.tenant_session_middleware.TenantSessionMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Add CORS middleware (must be before CommonMiddleware)
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom middleware for tenant and auth handling
    "core.middleware.TenantMiddleware",  # Must be after AuthenticationMiddleware
    # 'core.middleware.JWTAuthMiddleware',  # Uncomment when Auth microservice is ready
    "core.middleware.RequestLoggingMiddleware",  # For structured logging with context
]

ROOT_URLCONF = "erp_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "erp_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# PostgreSQL configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "new_db",
        "USER": "postgres",
        "PASSWORD": "abc123",
        "HOST": "localhost",
        "PORT": "5432",
        "OPTIONS": {"options": "-c search_path=public"},  # Set default schema to public
    }
}

DATABASE_ROUTERS = ["erp_backend.router.TenantRouter"]


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")

# Google Cloud Storage Settings
DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
GS_BUCKET_NAME = os.getenv("GS_BUCKET_NAME", "turtle_qrosity")
GS_PROJECT_ID = os.getenv("GS_PROJECT_ID", "turtle-software-qrosity")
GS_CREDENTIALS_FILE = os.path.join(BASE_DIR, "gcs-credentials.json")
GS_DEFAULT_ACL = None  # Disable ACLs for uniform bucket-level access
GS_FILE_OVERWRITE = False
GS_MAX_MEMORY_SIZE = 5242880
GS_BLOB_CHUNK_SIZE = 1024 * 1024
GS_LOCATION = "catalogue-images"

GCS_INVOICE_BUCKET_NAME = "turtle_qrosity"

# Configure the storage backend to use the correct credentials
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    GS_CREDENTIALS_FILE
)


# Celery settings
# Redis URL for various Redis-dependent services (Celery, session storage, caching)
REDIS_URL = os.getenv("REDIS_URL", "redis://127.0.0.1:6379/0")

# Celery settings
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_TIMEZONE = TIME_ZONE

# Rest Framework settings
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    # Authentication settings
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "erp_backend.middleware.CustomJWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "core.pagination.CustomPageNumberPagination",
    "PAGE_SIZE": 25,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # Throttling settings
    "DEFAULT_THROTTLE_CLASSES": [
        # Apply general throttling globally if desired
        # 'rest_framework.throttling.AnonRateThrottle',
        # 'rest_framework.throttling.UserRateThrottle',
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour",  # Example: Default rate for anonymous users
        "user": "1000/day",  # Example: Default rate for authenticated users
        # Define specific rates for our webhooks
        "payment_webhook": "30/min",  # Allow bursts up to 30 per minute for payment callbacks
        "fulfillment_webhook": "20/min",  # Allow bursts up to 20 per minute for fulfillment updates
        "webhook_sustained": "500/hour",  # Allow sustained rate up to 500 per hour for all webhooks
        # Cart operation throttle rates
        "cart_anon": "100/hour",  # Anonymous users cart operations
        "cart_user": "500/hour",  # Authenticated users cart operations
        # Checkout operation throttle rates
        "checkout_anon": "60/hour",  # Anonymous users checkout operations
        "checkout_user": "300/hour",  # Authenticated users checkout operations
    },
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Tenant configuration
TENANT_MODEL = "tenants.Tenant"

# DRF Spectacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": "Qrosity API",
    "DESCRIPTION": "API documentation for Qrosity ERP System",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

TOKEN_SECRET_KEY = "Qu1ckAss1st@123"
# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    # 'SIGNING_KEY': TOKEN_SECRET_KEY,
    "SIGNING_KEY": "abc123",
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}


# External service URLs
# These will be used by the API clients to connect to external microservices
# For development, these can point to mock servers or local services
AUTH_SERVICE_URL = os.environ.get("AUTH_SERVICE_URL", "http://localhost:8045")

# Product API Configuration
PRODUCT_API_URL = os.environ.get("PRODUCT_API_URL", "http://localhost:8045")
# Base URL for the Product API - includes path to API endpoints
PRODUCT_API_BASE_URL = os.environ.get(
    "PRODUCT_API_BASE_URL", "http://localhost:8045/api/"
)
# Default timeout for Product API requests (in seconds)
PRODUCT_API_TIMEOUT = int(os.environ.get("PRODUCT_API_TIMEOUT", "5"))
# Cache TTL for Product API responses (in seconds) - 5 minutes default
PRODUCT_API_CACHE_TTL = int(os.environ.get("PRODUCT_API_CACHE_TTL", "300"))
# Internal auth token for Product API (if required)
PRODUCT_API_AUTH_TOKEN = os.environ.get("PRODUCT_API_AUTH_TOKEN", None)

# Base URL for Inventory API - includes tenant slug placeholder
INVENTORY_API_URL = os.environ.get(
    "INVENTORY_API_URL",
    "http://localhost:8045/api/v1/{tenant_slug}/inventory/inventory/",
)

# Customer API Configuration
CUSTOMER_API_URL = os.environ.get("CUSTOMER_API_URL", "http://localhost:8045")
# Base URL for the Customer API - includes path to API endpoints
CUSTOMER_API_BASE_URL = os.environ.get(
    "CUSTOMER_API_BASE_URL", "http://localhost:8045/api/v1/"
)
# Default timeout for Customer API requests (in seconds)
CUSTOMER_API_TIMEOUT = int(os.environ.get("CUSTOMER_API_TIMEOUT", "5"))
# Cache TTL for Customer API responses (in seconds) - 5 minutes default
CUSTOMER_API_CACHE_TTL = int(os.environ.get("CUSTOMER_API_CACHE_TTL", "300"))
# Internal auth token for Customer API (if required)
CUSTOMER_API_AUTH_TOKEN = os.environ.get("CUSTOMER_API_AUTH_TOKEN", None)

# Inventory API settings
# INVENTORY_API_URL is defined above - removed duplicate definition
INTERNAL_API_AUTH_TOKEN = os.getenv("INTERNAL_API_AUTH_TOKEN", "")
INVENTORY_API_TIMEOUT = int(os.getenv("INVENTORY_API_TIMEOUT", "10"))

# Fulfillment API Configuration
FULFILLMENT_API_URL = os.environ.get("FULFILLMENT_API_URL", "http://localhost:8045")
# Default timeout for Fulfillment API requests (in seconds)
FULFILLMENT_API_TIMEOUT = int(os.environ.get("FULFILLMENT_API_TIMEOUT", "5"))
# Cache TTL for Fulfillment API responses (in seconds) - 5 minutes default
FULFILLMENT_API_CACHE_TTL = int(os.environ.get("FULFILLMENT_API_CACHE_TTL", "300"))
# Internal auth token for Fulfillment API (if required)
FULFILLMENT_API_AUTH_TOKEN = os.environ.get("FULFILLMENT_API_AUTH_TOKEN", None)
# Secret for validating fulfillment webhook requests
FULFILLMENT_WEBHOOK_SECRET = os.environ.get("FULFILLMENT_WEBHOOK_SECRET", None)


# Structured Logging Configuration
LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO").upper()

# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "tenant_context_filter": {
            "()": "core.logging.TenantContextFilter",
        },
        "request_id_filter": {
            "()": "core.logging.RequestIDFilter",
        },
    },
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "celery_formatter": {
            "format": "[%(asctime)s] [%(levelname)s] [%(name)s:%(lineno)d] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "format": """
                %(asctime)s %(levelname)s %(name)s
                Message: %(message)s
                Path: %(pathname)s
                Line: %(lineno)d
                Request ID: %(request_id)s
                User: %(user_id)s
                Tenant: %(tenant_id)s
            """,
        },
    },
    "handlers": {
        "file": {
            "level": LOG_LEVEL,
            "class": "logging.handlers.WatchedFileHandler",
            "filename": os.path.join(LOGS_DIR, "app.log"),
            "formatter": "json",
            "filters": ["tenant_context_filter", "request_id_filter"],
        },
        "console": {
            "level": LOG_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "filters": ["tenant_context_filter", "request_id_filter"],
        },
        "error_file": {
            "level": "ERROR",
            "class": "logging.handlers.WatchedFileHandler",  # Changed to WatchedFileHandler for Windows compatibility
            "filename": os.path.join(LOGS_DIR, "error.log"),
            "formatter": "json",
            "filters": ["tenant_context_filter", "request_id_filter"],
        },
        "celery_logfile": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(
                LOGS_DIR, "celery.log"
            ),  # General Celery worker logs
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "celery_formatter",
        },
        "celery_task_logfile": {  # For Celery's own task messages AND your app's task messages
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(
                LOGS_DIR, "celery_tasks.log"
            ),  # Specific file for task-related logs
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 3,
            "formatter": "celery_formatter",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file", "error_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "error_file"],
            "level": "ERROR",
            "propagate": False,
        },
        "celery": {  # Root logger for Celery itself (startup, connection, etc.)
            "handlers": ["celery_logfile", "console"],
            "level": "INFO",
            "propagate": True,  # Let Celery's own sub-loggers decide if they propagate
        },
        "celery.task": {  # Logger for Celery's internal task messages (e.g., "Task received", "Task succeeded")
            "handlers": ["celery_task_logfile", "console"],
            "level": "INFO",
            "propagate": False,  # Don't let these duplicate to the main 'celery' logger if handled here
        },
        "celery.worker": {
            "handlers": [
                "celery_logfile",
                "console",
            ],  # Worker specific logs to general celery log
            "level": "INFO",
            "propagate": False,
        },
        "celery.beat": {
            "handlers": ["celery_logfile", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["console", "file"],
            "level": "WARNING",  # Set to DEBUG to log all SQL queries
            "propagate": False,
        },
        # Application loggers
        "core": {
            "handlers": ["console", "file", "error_file"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "customers": {
            "handlers": ["console", "file", "error_file"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "ecomm_auth": {
            "handlers": ["console", "file", "error_file"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "activities": {
            "handlers": ["console", "file", "error_file"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "products": {
            "handlers": ["console", "file", "error_file"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "ecomm_inventory": {
            "handlers": ["console", "file", "error_file"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        # Root logger
        "": {
            "handlers": ["console", "file", "error_file"],
            "level": LOG_LEVEL,
        },
    },
}

# Payment Microservice Settings
PAYMENT_MS_URL = os.getenv("PAYMENT_MS_URL", "https://payment-ms.example.com/api")
PAYMENT_MS_API_KEY = os.getenv(
    "PAYMENT_MS_API_KEY", "test-api-key-for-development-only"
)
PAYMENT_MS_WEBHOOK_SECRET = os.getenv(
    "PAYMENT_MS_WEBHOOK_SECRET", "test-webhook-secret-for-development-only"
)
